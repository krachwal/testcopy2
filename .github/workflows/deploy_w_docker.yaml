name: Build and Deploy to Cloud with Docker

on:
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update -y && sudo apt-get install -y ca-certificates curl
        # Add Docker's official GPG key:
        sudo apt-get update
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc
        echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    - name: Build Docker image
      env: 
        HOST: ${{ secrets.HOST }}
      run: | 
        docker build --build-arg public_ip=$HOST -t autora-web-server:latest .

    - name: Save Docker image as tarball
      run: |
        docker save autora-web-server:latest | gzip > image.tar.gz

    - name: Prepare SSH dir
      run: |
        mkdir -pv ~/.ssh/

    - name: Write SSH key
      env:
        KEY: ${{ secrets.KEY }}
      run: |
        echo "$KEY" > ~/.ssh/actions.key
        chmod 600 ~/.ssh/actions.key

    - name: Write SSH config
      env:
        HOST: ${{ secrets.HOST }}
        USERNAME: ${{ secrets.USERNAME }}
      run: |
        cat >>~/.ssh/config <<END
        Host webserver
            HostName $HOST
            User $USERNAME
            IdentityFile ~/.ssh/actions.key
            StrictHostKeyChecking=no
            ServerAliveCountMax=10
            ServerAliveInterval=60
        END

    - name: Copy Docker image to server
      env:
        EC2_USERNAME: ${{ secrets.USERNAME }}
      run: |
        scp image.tar.gz webserver:~

    - name: Stop running container & verify that Docker command available
      run: | 
        ssh webserver 'sudo docker ps -q | xargs --no-run-if-empty docker stop | xargs --no-run-if-empty docker rm'

    - name: Load Image
      env:
        EC2_USERNAME: ${{ secrets.USERNAME }}
      run: |
        ssh webserver "sudo docker load -i ~/image.tar.gz"

    - name: Delete gzipped image tarball
      env:
        EC2_USERNAME: ${{ secrets.USERNAME }}
      run: |
        ssh webserver "rm -f ~/image.tar.gz"

    - name: Run Docker container on EC2 instance
      run: |
        ssh webserver "sudo docker run -p 80:80 -d autora-web-server:latest"

    - name: Cleanup Docker detritus
      run: |
        ssh webserver "sudo docker system prune -f"